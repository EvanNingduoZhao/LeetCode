import java.util.Arrays;
import java.util.HashMap;
/* in an unsorted data structure, when you want to check the "outcome" of two elements(this outcome can be sum,product.etc):
    应该用hashmap，思路是你在遍历每一个element时，要知道如果一对elements中的一个是本个，那么另一个应取什么值，去hashmap里面找key为此目标值的entry（在Hashmap里找takeO(1)）这个方法的本质是每看一个element就最大化利用它：
    相较于用O(n square)的蛮力方法时，每看一个nums[j],都只能check其和nums[i]这一个element的组合结果，但是用Hashmap的话，每看一个新element就去已经看过的elements中找有没有目标值，相当于每看一个都把其与所有已经看过的elements的组合结果都看了一遍。当然这样的代价是更高的空间复杂度*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if(nums == null||nums.length==0){
            return null;
        }
        else if(nums.length==1&&nums[0]!=target){
            return null;
        }
        else{
            HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
            for(int i=0;i<nums.length;i++){
                if(map.containsKey(target-nums[i]))
                    return new int[] {map.get(target-nums[i]),i};
                else
                    map.put(nums[i],i);
            }


            return new int[] {-1,-1};
        }
    }
}